# ================================= Ethereum ==================================
type Account @entity {
	id:                           ID!
	balances:                     [Balance!]! @derivedFrom(field: "account")
	transfersFrom:                [Transfer!]! @derivedFrom(field: "from")
	transfersTo:                  [Transfer!]! @derivedFrom(field: "to")
	approvalsOwner:               [Approval!]! @derivedFrom(field: "owner")
	approvalsSpender:             [Approval!]! @derivedFrom(field: "spender")
	roles:                        [AccountRole!]! @derivedFrom(field: "account")
	rolesGranted:                 [RoleGranted!]! @derivedFrom(field: "account")
	rolesRevoked:                 [RoleRevoked!]! @derivedFrom(field: "account")
}

type Token @entity {
	id:                           ID!
	name:                         String!
	symbol:                       String!
	decimals:                     Int!
	balances:                     [Balance!]! @derivedFrom(field: "token")
	transfers:                    [Transfer!]! @derivedFrom(field: "token")
	approvals:                    [Approval!]! @derivedFrom(field: "token")
}

type Balance @entity {
	id:                           ID!
	token:                        Token!
	account:                      Account!
	value:                        DecimalValue!
	transfersFrom:                [Transfer!]! @derivedFrom(field: "fromBalance")
	transfersTo:                  [Transfer!]! @derivedFrom(field: "toBalance")
}

type AccessControl @entity {
	id:                           ID!
	roles:                        [Role!]! @derivedFrom(field: "accesscontrol")
}

type RoleID @entity {
	id:                           ID!
	roles:                        [Role!]! @derivedFrom(field: "roleid")
}

type Role @entity {
	id:                           ID!
	accesscontrol:                AccessControl!
	roleid:                       RoleID!
	admin:                        Role
	members:                      [AccountRole!]! @derivedFrom(field: "role")
	granted:                      [RoleGranted!]! @derivedFrom(field: "role")
	revoked:                      [RoleRevoked!]! @derivedFrom(field: "role")
}

type AccountRole @entity {
	id:                           ID!
	account:                      Account!
	role:                         Role!
}

type Transfer implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	fromBalance:                  Balance
	to:                           Account!
	toBalance:                    Balance
	value:                        BigDecimal!
}

type Approval implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	owner:                        Account!
	spender:                      Account!
	value:                        BigDecimal!
}

type RoleGranted implements Event @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	role:                         Role!
	sender:                       Account!
}

type RoleRevoked implements Event @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	role:                         Role!
	sender:                       Account!
}
