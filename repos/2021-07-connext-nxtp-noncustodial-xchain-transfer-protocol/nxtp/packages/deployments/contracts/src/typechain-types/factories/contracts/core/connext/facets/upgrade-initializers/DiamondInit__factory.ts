/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  DiamondInit,
  DiamondInitInterface,
} from "../../../../../../contracts/core/connext/facets/upgrade-initializers/DiamondInit";

const _abi = [
  {
    inputs: [],
    name: "BaseConnextFacet__getAdoptedAsset_assetNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__getApprovedCanonicalId_notAllowlisted",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__nonReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__nonXCallReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__whenNotPaused_paused",
    type: "error",
  },
  {
    inputs: [],
    name: "DiamondInit__init_alreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "DiamondInit__init_domainsDontMatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_xAppConnectionManager",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_acceptanceDelay",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_lpTokenTargetAddress",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x00040000000000020005000000000002000000000301001900000060033002700000005b04300197000300000041035500020000000103550000005b0030019d000100000000001f0000008001000039000000400010043f0000000101200190000000740000c13d0000000001000031000000040110008c000000fa0000413d0000000201000367000000000101043b0000005d011001970000005e0110009c000000fa0000c13d0000000001000416000000000110004c000000fa0000c13d000000040100008a00000000011000310000005f02000041000000800310008c000000000300001900000000030240190000005f01100197000000000410004c000000000200a0190000005f0110009c00000000010300190000000001026019000000000110004c000000fa0000c13d00000002010003670000000402100370000000000202043b0000005b072001970000005b0220009c000000fa0000213d0000002402100370000000000302043b0000006002300197000000600330009c000000fa0000213d0000006401100370000000000601043b000000600160009c000000fa0000213d000000000800041a000000ff018001900000007e0000c13d000000400900043d0000006201000041000000000101041a00000060011001970000000003000411000000000113004b000000830000c13d000000650100004100000000001904350000000001000414000000040320008c000000910000613d000000200500003900000000030900190000000004090019000500000002001d000400000006001d000300000007001d000200000008001d000100000009001d016701080000040f00000001090000290000000208000029000000030700002900000004060000290000000502000029000000000110004c000000910000c13d0000000302000367000000400100043d00000001040000310000001f0340018f0000000504400272000000630000613d000000000500001900000005065002100000000007610019000000000662034f000000000606043b00000000006704350000000105500039000000000645004b0000005b0000413d000000000530004c000000720000613d0000000504400210000000000242034f00000000044100190000000303300210000000000504043300000000053501cf000000000535022f000000000202043b0000010003300089000000000232022f00000000023201cf000000000252019f00000000002404350000000102000031016701590000040f0000000001000416000000000110004c000000fa0000c13d000000200100003900000100001004430000012000000443000001000100003900000040020000390000005c030000410167014f0000040f0000006101000041000000800010043f00000080010000390000000402000039016701590000040f00000044019000390000006302000041000000000021043500000024019000390000001b0200003900000000002104350000006401000041000000000019043500000004019000390000002002000039000000000021043500000064020000390000000001090019016701590000040f0000000105000031000000200150008c000000200100003900000000010540190000001f01100039000000600310018f0000000001930019000000000331004b00000000030000190000000103004039000000660410009c000000fd0000213d0000000103300190000000fd0000c13d000000400010043f000000200350008c000000fa0000413d0000000004090433000000670340009c000000fa0000813d000400000006001d000500000002001d000000000274004b000300000007001d000001040000c13d000001000100008a000200000001001d000000000118016f00000001011001bf000000000010041b000000690100004100000000001004350000006a01000041000000200010043f00000000010000190167013c0000040f000000000201041a0000000203000029000000000232016f00000001022001bf000000000021041b0000006b01000041000000000010043500000000010000190167013c0000040f000000000201041a0000000203000029000000000232016f00000001022001bf000000000021041b0000006c01000041000000000010043500000000010000190167013c0000040f000000000201041a0000000203000029000000000232016f00000001022001bf000000000021041b0000006d01000041000000000010043500000000010000190167013c0000040f000000000201041a0000000203000029000000000232016f00000001022001bf000000000021041b00000044010000390000000201100367000000000101043b0000006e02000041000000000012041b00000001010000390000001602000039000000000012041b0000001702000039000000000012041b0000000402000039000000000302041a0000006f033001970000000304000029000000000343019f000000000032041b0000270b02000039000000000021041b00000005010000390000000c02000039000000000012041b0000002001000039000000000201041a00000070022001970000000503000029000000000232019f000000000021041b0000001a01000039000000000201041a00000070022001970000000403000029000000000232019f000000000021041b0000000001000019000000000200001900000000030000190167014f0000040f00000000010000190000000002000019016701590000040f000000710100004100000000001004350000004101000039000000040010043f00000024020000390000000001000019016701590000040f000000680200004100000000002104350000000402000039016701590000040f0002000000000002000200000005001d000100000004001d0000005b040000410000005b0530009c00000000030480190000005b0510009c0000000001048019000000c0011002100000004003300210000000000113019f00000072011001c7016701620000040f0000000109000029000000000301001900000060033002700000005b033001970000000205000029000000000453004b00000000050340190000001f0450018f0000000505500272000001280000613d000000000600001900000005076002100000000008790019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000001200000413d000000010220018f000000000640004c000001380000613d0000000505500210000000000651034f00000000055900190000000304400210000000000705043300000000074701cf000000000747022f000000000606043b0000010004400089000000000646022f00000000044601cf000000000474019f0000000000450435000100000003001f00030000000103550000000001020019000000000001042d0000005b0200004100000000030004140000005b0430009c00000000030280190000005b0410009c00000000010280190000004001100210000000c002300210000000000112019f00000073011001c70000801002000039016701620000040f00000001022001900000014c0000613d000000000101043b000000000001042d00000000010000190000000002000019016701590000040f0000005b040000410000005b0510009c0000000001048019000000400110021000000000013100190000005b0320009c000000000204801900000060022002100000000001210019000001680001042e0000005b030000410000005b0420009c00000000020380190000005b0410009c000000000103801900000040011002100000006002200210000000000112019f000001690001043000000165002104230000000102000039000000000001042d0000000002000019000001640000013d0000016700000432000001680001042e00000169000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000009a7e155e000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff63f20d0c00000000000000000000000000000000000000000000000000000000c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13204c69624469616d6f6e643a2021636f6e7472616374206f776e6572000000000008c379a0000000000000000000000000000000000000000000000000000000008d3638f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000000000000000000001000000003fba2f660000000000000000000000000000000000000000000000000000000001ffc9a700000000000000000000000000000000000000000000000000000000c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131fdeae47460000000000000000000000000000000000000000000000000000000048e2b09300000000000000000000000000000000000000000000000000000000286b971b00000000000000000000000000000000000000000000000000000000c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1322ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff00000000000000000000000000000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000002000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

type DiamondInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondInit__factory extends ContractFactory {
  constructor(...args: DiamondInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondInit> {
    return super.deploy(overrides || {}) as Promise<DiamondInit>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondInit {
    return super.attach(address) as DiamondInit;
  }
  override connect(signer: Signer): DiamondInit__factory {
    return super.connect(signer) as DiamondInit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInitInterface {
    return new utils.Interface(_abi) as DiamondInitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondInit {
    return new Contract(address, _abi, signerOrProvider) as DiamondInit;
  }
}
