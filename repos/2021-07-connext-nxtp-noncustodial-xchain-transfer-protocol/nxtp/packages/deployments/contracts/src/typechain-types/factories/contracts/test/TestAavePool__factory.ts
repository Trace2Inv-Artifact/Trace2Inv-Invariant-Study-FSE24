/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestAavePool,
  TestAavePoolInterface,
} from "../../../contracts/test/TestAavePool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "backUnbacked",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "mintUnbacked",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_revert",
        type: "bool",
      },
    ],
    name: "setRevertCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000001035500000060011002700000003a0010019d0000008001000039000000400010043f00000001012001900000003a0000c13d0000000001000031000000040110008c000000b20000413d0000000101000367000000000101043b000000e0011002700000003c0210009c000000440000613d0000003d0210009c0000006b0000613d0000003e0210009c000000900000613d0000003f0110009c000000b20000c13d0000000001000416000000000110004c000000b20000c13d000000040100008a00000000011000310000004002000041000000600310008c000000000300001900000000030240190000004001100197000000000410004c000000000200a019000000400110009c00000000010300190000000001026019000000000110004c000000b20000c13d00000001010003670000000402100370000000000202043b000000410220009c000000b20000213d0000004402100370000000000202043b000000410220009c000000b20000213d000000000200041a000000ff02200190000000b50000c13d0000002401100370000000000201043b000000400100043d00000000002104350000002002000039000000000300001900e100ce0000040f0000000001000416000000000110004c000000b20000c13d000000200100003900000100001004430000012000000443000001000100003900000040020000390000003b0300004100e100ce0000040f0000000001000416000000000110004c000000b20000c13d000000040100008a00000000011000310000004002000041000000600310008c000000000300001900000000030240190000004001100197000000000410004c000000000200a019000000400110009c00000000010300190000000001026019000000000110004c000000b20000c13d00000004010000390000000101100367000000000101043b000000410110009c000000b20000213d000000000100041a000000ff011001900000008c0000613d000000400100043d00000044021000390000004203000041000000000032043500000024021000390000001503000039000000000032043500000043020000410000000000210435000000040210003900000020030000390000000000320435000000640200003900e100d80000040f0000000001000416000000000110004c000000b20000c13d000000040100008a00000000011000310000004002000041000000800310008c000000000300001900000000030240190000004001100197000000000410004c000000000200a019000000400110009c00000000010300190000000001026019000000000110004c000000b20000c13d00000001010003670000000402100370000000000202043b000000410220009c000000b20000213d0000004402100370000000000202043b000000410220009c000000b20000213d0000006401100370000000000101043b0000ffff0110008c000000b20000213d000000000100041a000000ff01100190000000c00000c13d00000000010000190000000002000019000000000300001900e100ce0000040f0000000001000416000000000110004c000000b20000c13d000000040100008a00000000011000310000004002000041000000200310008c000000000300001900000000030240190000004001100197000000000410004c000000000200a019000000400110009c00000000010300190000000001026019000000000110004c000000b20000c13d00000004010000390000000101100367000000000101043b000000000210004c0000000002000019000000010200c039000000000221004b000000b20000c13d000001000200008a000000000300041a000000000223016f000000000112019f000000000010041b00000000010000190000000002000019000000000300001900e100ce0000040f0000000001000019000000000200001900e100d80000040f0000004301000041000000800010043f0000002001000039000000840010043f0000001101000039000000a40010043f0000004501000041000000c40010043f0000008001000039000000640200003900e100d80000040f000000400100043d00000044021000390000004403000041000000000032043500000024021000390000001503000039000000000032043500000043020000410000000000210435000000040210003900000020030000390000000000320435000000640200003900e100d80000040f0000003a040000410000003a0510009c0000000001048019000000400110021000000000013100190000003a0320009c000000000204801900000060022002100000000001210019000000e20001042e0000003a030000410000003a0420009c00000000020380190000003a0410009c000000000103801900000040011002100000006002200210000000000112019f000000e300010430000000e100000432000000e20001042e000000e300010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d65dc7a10000000000000000000000000000000000000000000000000000000069a933a500000000000000000000000000000000000000000000000000000000d33d5c860000000000000000000000000000000000000000000000000000000069328dec8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff6261636b556e6261636b6564207265766572746564000000000000000000000008c379a0000000000000000000000000000000000000000000000000000000006d696e74556e6261636b6564207265766572746564000000000000000000000077697468647261772072657665727465640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

type TestAavePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAavePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAavePool__factory extends ContractFactory {
  constructor(...args: TestAavePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestAavePool> {
    return super.deploy(overrides || {}) as Promise<TestAavePool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestAavePool {
    return super.attach(address) as TestAavePool;
  }
  override connect(signer: Signer): TestAavePool__factory {
    return super.connect(signer) as TestAavePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAavePoolInterface {
    return new utils.Interface(_abi) as TestAavePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAavePool {
    return new Contract(address, _abi, signerOrProvider) as TestAavePool;
  }
}
