/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  MultiSend,
  MultiSendInterface,
} from "../../../../../contracts/shared/libraries/Multisend.sol/MultiSend";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transactions",
        type: "bytes",
      },
    ],
    name: "multiSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x000200000000000200010000000103550000006001100270000000580010019d0000000101200190000000430000c13d0000008001000039000000400010043f0000000003000031000000040130008c0000005b0000413d0000000101000367000000000201043b0000005a022001970000005b0220009c0000005b0000c13d000000040230008a0000005c04000041000000200520008c000000000500001900000000050440190000005c02200197000000000620004c000000000400a0190000005c0220009c00000000020500190000000002046019000000000220004c0000005b0000c13d0000000402100370000000000202043b0000005d0420009c0000005b0000213d00000023042000390000005c05000041000000000634004b000000000600001900000000060580190000005c033001970000005c04400197000000000734004b0000000005008019000000000334013f0000005c0330009c00000000030600190000000003056019000000000330004c0000005b0000c13d0000000403200039000000000131034f000000000101043b0000005e0310009c0000003c0000813d0000001f03100039000000200400008a000000000343016f000000bf03300039000000000343016f0000005d0430009c000000540000a13d0000005f0100004100000000001004350000004101000039000000040010043f00000024020000390000000001000019015b00e00000040f000000a001000039000000400010043f0000000001000416000000000110004c0000005b0000c13d0000000001000410000000800010043f000001400000044300000160001004430000002001000039000001000010044300000001010000390000012000100443000001000100003900000080020000390000005903000041015b00d60000040f000000400030043f000000800010043f000000240320003900000000023100190000000004000031000000000242004b0000005e0000a13d00000000010000190000000002000019015b00e00000040f0000001f0210018f000000010330036700000005041002720000006b0000613d00000000050000190000000506500210000000000763034f000000000707043b000000a00660003900000000007604350000000105500039000000000645004b000000630000413d000000000520004c0000007a0000613d0000000504400210000000000343034f0000000302200210000000a004400039000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f0000000000240435000000a00110003900000000000104350000008001000039015b00e90000040f000000000100001900000000020000190000000003000019015b00d60000040f0002000000000002000200000006001d000100000005001d0000005805000041000000580630009c00000000030580190000004003300210000000580640009c00000000040580190000006004400210000000000334019f000000580410009c0000000001058019000000c001100210000000000113019f015b014c0000040f00000001080000290000000003010019000000600330027000000058033001970000000205000029000000000453004b000000000405001900000000040340190000001f0340018f0000000504400272000000a60000613d000000000500001900000005065002100000000007680019000000000661034f000000000606043b00000000006704350000000105500039000000000645004b0000009e0000413d000000010220018f000000000530004c000000b60000613d0000000504400210000000000141034f00000000044800190000000303300210000000000504043300000000053501cf000000000535022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f00000000001404350000000001020019000000000001042d0000005805000041000000580630009c00000000030580190000004003300210000000580640009c00000000040580190000006004400210000000000334019f000000580410009c0000000001058019000000c001100210000000000113019f015b01560000040f000000010120018f000000000001042d00000058010000410000000002000414000000580320009c0000000001024019000000c00110021000000060011001c70000800202000039015b01510000040f0000000102200190000000d30000613d000000000101043b000000000001042d00000000010000190000000002000019015b00e00000040f0000005804000041000000580510009c000000000104801900000040011002100000000001310019000000580320009c0000000002048019000000600220021000000000012100190000015c0001042e0000005803000041000000580420009c0000000002038019000000580410009c000000000103801900000040011002100000006002200210000000000112019f0000015d000104300004000000000002000200000001001d0000006101000041000000000010043900000000010004110000000400100443015b00c70000040f000000000110004c0000013b0000c13d000000200800003900000002060000290000000007060433000100000007001d000000000178004b000001370000813d00000000016800190000005503100039000000350210003900000000040204330000000102100039000000000202043300000060092002700000000002010433000000f8022002720000010c0000613d000000010120008c000001380000c13d0000000001000414000000040290008c000001340000613d000400000008001d0000000002090019000300000004001d015b00b80000040f0000012e0000013d000000150110003900000000050104330000000001000414000000040290008c000001340000613d000400000008001d000000000250004c000300000004001d0000012a0000613d0000005802000041000000580630009c00000000030280190000004003300210000000580640009c000000000602001900000000060440190000006006600210000000000336019f000000580610009c0000000001028019000000c001100210000000000131019f00000065011001c70000800902000039000000000305001900000000040900190000000005000019015b014c0000040f000000010120018f0000012e0000013d000000000209001900000000050000190000000006000019015b00820000040f000000000110004c0000000206000029000000010700002900000004080000290000000304000029000001380000613d00000000014800190000005508100039000000f60000013d000000000001042d00000000010000190000000002000019015b00e00000040f000000400100043d000000640210003900000062030000410000000000320435000000440210003900000063030000410000000000320435000000240210003900000027030000390000000000320435000000640200004100000000002104350000000402100039000000200300003900000000003204350000008402000039015b00e00000040f0000014f002104210000000102000039000000000001042d00000000020000190000014e0000013d00000154002104230000000102000039000000000001042d0000000002000019000001530000013d00000159002104250000000102000039000000000001042d0000000002000019000001580000013d0000015b000004320000015c0001042e0000015d000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000008d80ff0a000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000000000000100000000000000004e487b710000000000000000000000000000000000000000000000000000000002000002000000000000000000000000000000240000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8376696120454f41000000000000000000000000000000000000000000000000004d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642008c379a00000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

type MultiSendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSend__factory extends ContractFactory {
  constructor(...args: MultiSendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiSend> {
    return super.deploy(overrides || {}) as Promise<MultiSend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiSend {
    return super.attach(address) as MultiSend;
  }
  override connect(signer: Signer): MultiSend__factory {
    return super.connect(signer) as MultiSend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSendInterface {
    return new utils.Interface(_abi) as MultiSendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSend {
    return new Contract(address, _abi, signerOrProvider) as MultiSend;
  }
}
