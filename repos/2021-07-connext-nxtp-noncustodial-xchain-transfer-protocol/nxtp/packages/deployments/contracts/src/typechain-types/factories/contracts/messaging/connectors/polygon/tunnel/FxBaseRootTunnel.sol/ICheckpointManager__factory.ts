/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../common";
import type {
  ICheckpointManager,
  ICheckpointManagerInterface,
} from "../../../../../../../contracts/messaging/connectors/polygon/tunnel/FxBaseRootTunnel.sol/ICheckpointManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "headerBlocks",
    outputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000001035500000060011002700000001d0010019d0000008001000039000000400010043f00000001012001900000003b0000c13d0000000001000031000000040110008c000000450000413d0000000101000367000000000101043b0000001f01100197000000200110009c000000450000c13d0000000001000416000000000110004c000000450000c13d000000040100008a00000000011000310000002102000041000000200310008c000000000300001900000000030240190000002101100197000000000410004c000000000200a019000000210110009c00000000010300190000000001026019000000000110004c000000450000c13d00000004010000390000000101100367000000000101043b0000000000100435000000200000043f0000000001000019006e00480000040f0000000402100039000000000202041a0000000303100039000000000303041a0000000204100039000000000404041a0000000105100039000000000505041a000000000101041a000000800010043f000000a00050043f000000c00040043f000000e00030043f0000002201200197000001000010043f0000008001000039000000a0020000390000000003000019006e005b0000040f0000000001000416000000000110004c000000450000c13d000000200100003900000100001004430000012000000443000001000100003900000040020000390000001e03000041006e005b0000040f00000000010000190000000002000019006e00600000040f0000001d0200004100000000030004140000001d0430009c00000000030280190000001d0410009c00000000010280190000004001100210000000c002300210000000000112019f00000023011001c70000801002000039006e00690000040f0000000102200190000000580000613d000000000101043b000000000001042d00000000010000190000000002000019006e00600000040f00000040011002100000006002200210000000000112001900000000013100190000006f0001042e0000001d030000410000001d0420009c00000000020380190000001d0410009c000000000103801900000040011002100000006002200210000000000112019f00000070000104300000006c002104230000000102000039000000000001042d00000000020000190000006b0000013d0000006e000004320000006f0001042e000000700001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000041539d4a000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff02000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

type ICheckpointManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ICheckpointManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ICheckpointManager__factory extends ContractFactory {
  constructor(...args: ICheckpointManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ICheckpointManager> {
    return super.deploy(overrides || {}) as Promise<ICheckpointManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ICheckpointManager {
    return super.attach(address) as ICheckpointManager;
  }
  override connect(signer: Signer): ICheckpointManager__factory {
    return super.connect(signer) as ICheckpointManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ICheckpointManagerInterface {
    return new utils.Interface(_abi) as ICheckpointManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICheckpointManager {
    return new Contract(address, _abi, signerOrProvider) as ICheckpointManager;
  }
}
