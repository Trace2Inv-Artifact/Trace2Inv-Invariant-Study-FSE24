schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type mantle_AggregateRoot {
  id: ID!
  root: mantle_Bytes!
  blockNumber: BigInt!
}

type mantle_AggregateRootProposed {
  id: ID!
  aggregateRoot: mantle_Bytes!
  rootTimestamp: BigInt!
  endOfDispute: BigInt!
  domain: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt
}

input mantle_AggregateRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: mantle_Bytes
  aggregateRoot_not: mantle_Bytes
  aggregateRoot_gt: mantle_Bytes
  aggregateRoot_lt: mantle_Bytes
  aggregateRoot_gte: mantle_Bytes
  aggregateRoot_lte: mantle_Bytes
  aggregateRoot_in: [mantle_Bytes!]
  aggregateRoot_not_in: [mantle_Bytes!]
  aggregateRoot_contains: mantle_Bytes
  aggregateRoot_not_contains: mantle_Bytes
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  endOfDispute: BigInt
  endOfDispute_not: BigInt
  endOfDispute_gt: BigInt
  endOfDispute_lt: BigInt
  endOfDispute_gte: BigInt
  endOfDispute_lte: BigInt
  endOfDispute_in: [BigInt!]
  endOfDispute_not_in: [BigInt!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_AggregateRootProposed_filter]
  or: [mantle_AggregateRootProposed_filter]
}

enum mantle_AggregateRootProposed_orderBy {
  id
  aggregateRoot
  rootTimestamp
  endOfDispute
  domain
  timestamp
  blockNumber
}

input mantle_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: mantle_Bytes
  root_not: mantle_Bytes
  root_gt: mantle_Bytes
  root_lt: mantle_Bytes
  root_gte: mantle_Bytes
  root_lte: mantle_Bytes
  root_in: [mantle_Bytes!]
  root_not_in: [mantle_Bytes!]
  root_contains: mantle_Bytes
  root_not_contains: mantle_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_AggregateRoot_filter]
  or: [mantle_AggregateRoot_filter]
}

enum mantle_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type mantle_Asset {
  id: ID!
  key: mantle_Bytes
  decimal: BigInt
  adoptedDecimal: BigInt
  canonicalId: mantle_Bytes
  canonicalDomain: BigInt
  adoptedAsset: mantle_Bytes
  localAsset: mantle_Bytes
  blockNumber: BigInt
  status: mantle_AssetStatus
}

type mantle_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: mantle_Router!
  asset: mantle_Asset!
  feesEarned: BigInt!
}

input mantle_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mantle_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mantle_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_AssetBalance_filter]
  or: [mantle_AssetBalance_filter]
}

enum mantle_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  feesEarned
}

type mantle_AssetStatus {
  id: ID!
  status: Boolean
}

input mantle_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_AssetStatus_filter]
  or: [mantle_AssetStatus_filter]
}

enum mantle_AssetStatus_orderBy {
  id
  status
}

input mantle_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: mantle_Bytes
  key_not: mantle_Bytes
  key_gt: mantle_Bytes
  key_lt: mantle_Bytes
  key_gte: mantle_Bytes
  key_lte: mantle_Bytes
  key_in: [mantle_Bytes!]
  key_not_in: [mantle_Bytes!]
  key_contains: mantle_Bytes
  key_not_contains: mantle_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  adoptedDecimal: BigInt
  adoptedDecimal_not: BigInt
  adoptedDecimal_gt: BigInt
  adoptedDecimal_lt: BigInt
  adoptedDecimal_gte: BigInt
  adoptedDecimal_lte: BigInt
  adoptedDecimal_in: [BigInt!]
  adoptedDecimal_not_in: [BigInt!]
  canonicalId: mantle_Bytes
  canonicalId_not: mantle_Bytes
  canonicalId_gt: mantle_Bytes
  canonicalId_lt: mantle_Bytes
  canonicalId_gte: mantle_Bytes
  canonicalId_lte: mantle_Bytes
  canonicalId_in: [mantle_Bytes!]
  canonicalId_not_in: [mantle_Bytes!]
  canonicalId_contains: mantle_Bytes
  canonicalId_not_contains: mantle_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: mantle_Bytes
  adoptedAsset_not: mantle_Bytes
  adoptedAsset_gt: mantle_Bytes
  adoptedAsset_lt: mantle_Bytes
  adoptedAsset_gte: mantle_Bytes
  adoptedAsset_lte: mantle_Bytes
  adoptedAsset_in: [mantle_Bytes!]
  adoptedAsset_not_in: [mantle_Bytes!]
  adoptedAsset_contains: mantle_Bytes
  adoptedAsset_not_contains: mantle_Bytes
  localAsset: mantle_Bytes
  localAsset_not: mantle_Bytes
  localAsset_gt: mantle_Bytes
  localAsset_lt: mantle_Bytes
  localAsset_gte: mantle_Bytes
  localAsset_lte: mantle_Bytes
  localAsset_in: [mantle_Bytes!]
  localAsset_not_in: [mantle_Bytes!]
  localAsset_contains: mantle_Bytes
  localAsset_not_contains: mantle_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: mantle_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_Asset_filter]
  or: [mantle_Asset_filter]
}

enum mantle_Asset_orderBy {
  id
  key
  decimal
  adoptedDecimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
  status__id
  status__status
}

scalar mantle_BigDecimal

scalar BigInt

input mantle_BlockChangedFilter {
  number_gte: Int!
}

input mantle_Block_height {
  hash: mantle_Bytes
  number: Int
  number_gte: Int
}

scalar mantle_Bytes

type mantle_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: mantle_Bytes
  rootManager: mantle_Bytes
  mirrorConnector: mantle_Bytes
}

input mantle_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mantle_Bytes
  amb_not: mantle_Bytes
  amb_gt: mantle_Bytes
  amb_lt: mantle_Bytes
  amb_gte: mantle_Bytes
  amb_lte: mantle_Bytes
  amb_in: [mantle_Bytes!]
  amb_not_in: [mantle_Bytes!]
  amb_contains: mantle_Bytes
  amb_not_contains: mantle_Bytes
  rootManager: mantle_Bytes
  rootManager_not: mantle_Bytes
  rootManager_gt: mantle_Bytes
  rootManager_lt: mantle_Bytes
  rootManager_gte: mantle_Bytes
  rootManager_lte: mantle_Bytes
  rootManager_in: [mantle_Bytes!]
  rootManager_not_in: [mantle_Bytes!]
  rootManager_contains: mantle_Bytes
  rootManager_not_contains: mantle_Bytes
  mirrorConnector: mantle_Bytes
  mirrorConnector_not: mantle_Bytes
  mirrorConnector_gt: mantle_Bytes
  mirrorConnector_lt: mantle_Bytes
  mirrorConnector_gte: mantle_Bytes
  mirrorConnector_lte: mantle_Bytes
  mirrorConnector_in: [mantle_Bytes!]
  mirrorConnector_not_in: [mantle_Bytes!]
  mirrorConnector_contains: mantle_Bytes
  mirrorConnector_not_contains: mantle_Bytes
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_ConnectorMeta_filter]
  or: [mantle_ConnectorMeta_filter]
}

enum mantle_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mantle_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: mantle_Bytes
  nonce: BigInt
  status: mantle_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: mantle_Router_orderBy, orderDirection: mantle_OrderDirection, where: mantle_Router_filter): [mantle_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mantle_Bytes
  delegate: mantle_Bytes
  receiveLocal: Boolean
  callData: mantle_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: mantle_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mantle_Bytes
  asset: mantle_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: mantle_Bytes
  executedTransactionHash: mantle_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: mantle_Bytes
  executedTxNonce: BigInt
  reconciledCaller: mantle_Bytes
  reconciledTransactionHash: mantle_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: mantle_Bytes
  reconciledTxNonce: BigInt
}

input mantle_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mantle_Bytes
  transferId_not: mantle_Bytes
  transferId_gt: mantle_Bytes
  transferId_lt: mantle_Bytes
  transferId_gte: mantle_Bytes
  transferId_lte: mantle_Bytes
  transferId_in: [mantle_Bytes!]
  transferId_not_in: [mantle_Bytes!]
  transferId_contains: mantle_Bytes
  transferId_not_contains: mantle_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mantle_TransferStatus
  status_not: mantle_TransferStatus
  status_in: [mantle_TransferStatus!]
  status_not_in: [mantle_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: mantle_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mantle_Bytes
  to_not: mantle_Bytes
  to_gt: mantle_Bytes
  to_lt: mantle_Bytes
  to_gte: mantle_Bytes
  to_lte: mantle_Bytes
  to_in: [mantle_Bytes!]
  to_not_in: [mantle_Bytes!]
  to_contains: mantle_Bytes
  to_not_contains: mantle_Bytes
  delegate: mantle_Bytes
  delegate_not: mantle_Bytes
  delegate_gt: mantle_Bytes
  delegate_lt: mantle_Bytes
  delegate_gte: mantle_Bytes
  delegate_lte: mantle_Bytes
  delegate_in: [mantle_Bytes!]
  delegate_not_in: [mantle_Bytes!]
  delegate_contains: mantle_Bytes
  delegate_not_contains: mantle_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mantle_Bytes
  callData_not: mantle_Bytes
  callData_gt: mantle_Bytes
  callData_lt: mantle_Bytes
  callData_gte: mantle_Bytes
  callData_lte: mantle_Bytes
  callData_in: [mantle_Bytes!]
  callData_not_in: [mantle_Bytes!]
  callData_contains: mantle_Bytes
  callData_not_contains: mantle_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: mantle_Bytes
  originSender_not: mantle_Bytes
  originSender_gt: mantle_Bytes
  originSender_lt: mantle_Bytes
  originSender_gte: mantle_Bytes
  originSender_lte: mantle_Bytes
  originSender_in: [mantle_Bytes!]
  originSender_not_in: [mantle_Bytes!]
  originSender_contains: mantle_Bytes
  originSender_not_contains: mantle_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mantle_Bytes
  canonicalId_not: mantle_Bytes
  canonicalId_gt: mantle_Bytes
  canonicalId_lt: mantle_Bytes
  canonicalId_gte: mantle_Bytes
  canonicalId_lte: mantle_Bytes
  canonicalId_in: [mantle_Bytes!]
  canonicalId_not_in: [mantle_Bytes!]
  canonicalId_contains: mantle_Bytes
  canonicalId_not_contains: mantle_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mantle_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: mantle_Bytes
  executedCaller_not: mantle_Bytes
  executedCaller_gt: mantle_Bytes
  executedCaller_lt: mantle_Bytes
  executedCaller_gte: mantle_Bytes
  executedCaller_lte: mantle_Bytes
  executedCaller_in: [mantle_Bytes!]
  executedCaller_not_in: [mantle_Bytes!]
  executedCaller_contains: mantle_Bytes
  executedCaller_not_contains: mantle_Bytes
  executedTransactionHash: mantle_Bytes
  executedTransactionHash_not: mantle_Bytes
  executedTransactionHash_gt: mantle_Bytes
  executedTransactionHash_lt: mantle_Bytes
  executedTransactionHash_gte: mantle_Bytes
  executedTransactionHash_lte: mantle_Bytes
  executedTransactionHash_in: [mantle_Bytes!]
  executedTransactionHash_not_in: [mantle_Bytes!]
  executedTransactionHash_contains: mantle_Bytes
  executedTransactionHash_not_contains: mantle_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: mantle_Bytes
  executedTxOrigin_not: mantle_Bytes
  executedTxOrigin_gt: mantle_Bytes
  executedTxOrigin_lt: mantle_Bytes
  executedTxOrigin_gte: mantle_Bytes
  executedTxOrigin_lte: mantle_Bytes
  executedTxOrigin_in: [mantle_Bytes!]
  executedTxOrigin_not_in: [mantle_Bytes!]
  executedTxOrigin_contains: mantle_Bytes
  executedTxOrigin_not_contains: mantle_Bytes
  executedTxNonce: BigInt
  executedTxNonce_not: BigInt
  executedTxNonce_gt: BigInt
  executedTxNonce_lt: BigInt
  executedTxNonce_gte: BigInt
  executedTxNonce_lte: BigInt
  executedTxNonce_in: [BigInt!]
  executedTxNonce_not_in: [BigInt!]
  reconciledCaller: mantle_Bytes
  reconciledCaller_not: mantle_Bytes
  reconciledCaller_gt: mantle_Bytes
  reconciledCaller_lt: mantle_Bytes
  reconciledCaller_gte: mantle_Bytes
  reconciledCaller_lte: mantle_Bytes
  reconciledCaller_in: [mantle_Bytes!]
  reconciledCaller_not_in: [mantle_Bytes!]
  reconciledCaller_contains: mantle_Bytes
  reconciledCaller_not_contains: mantle_Bytes
  reconciledTransactionHash: mantle_Bytes
  reconciledTransactionHash_not: mantle_Bytes
  reconciledTransactionHash_gt: mantle_Bytes
  reconciledTransactionHash_lt: mantle_Bytes
  reconciledTransactionHash_gte: mantle_Bytes
  reconciledTransactionHash_lte: mantle_Bytes
  reconciledTransactionHash_in: [mantle_Bytes!]
  reconciledTransactionHash_not_in: [mantle_Bytes!]
  reconciledTransactionHash_contains: mantle_Bytes
  reconciledTransactionHash_not_contains: mantle_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: mantle_Bytes
  reconciledTxOrigin_not: mantle_Bytes
  reconciledTxOrigin_gt: mantle_Bytes
  reconciledTxOrigin_lt: mantle_Bytes
  reconciledTxOrigin_gte: mantle_Bytes
  reconciledTxOrigin_lte: mantle_Bytes
  reconciledTxOrigin_in: [mantle_Bytes!]
  reconciledTxOrigin_not_in: [mantle_Bytes!]
  reconciledTxOrigin_contains: mantle_Bytes
  reconciledTxOrigin_not_contains: mantle_Bytes
  reconciledTxNonce: BigInt
  reconciledTxNonce_not: BigInt
  reconciledTxNonce_gt: BigInt
  reconciledTxNonce_lt: BigInt
  reconciledTxNonce_gte: BigInt
  reconciledTxNonce_lte: BigInt
  reconciledTxNonce_in: [BigInt!]
  reconciledTxNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_DestinationTransfer_filter]
  or: [mantle_DestinationTransfer_filter]
}

enum mantle_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  executedTxNonce
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
  reconciledTxNonce
}

"""
8 bytes signed integer

"""
scalar mantle_Int8

type mantle_OptimisticRootFinalized {
  id: ID!
  aggregateRoot: mantle_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input mantle_OptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: mantle_Bytes
  aggregateRoot_not: mantle_Bytes
  aggregateRoot_gt: mantle_Bytes
  aggregateRoot_lt: mantle_Bytes
  aggregateRoot_gte: mantle_Bytes
  aggregateRoot_lte: mantle_Bytes
  aggregateRoot_in: [mantle_Bytes!]
  aggregateRoot_not_in: [mantle_Bytes!]
  aggregateRoot_contains: mantle_Bytes
  aggregateRoot_not_contains: mantle_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_OptimisticRootFinalized_filter]
  or: [mantle_OptimisticRootFinalized_filter]
}

enum mantle_OptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum mantle_OrderDirection {
  asc
  desc
}

type mantle_OriginMessage {
  id: ID!
  transferId: mantle_Bytes
  destinationDomain: BigInt
  leaf: mantle_Bytes
  index: BigInt
  message: mantle_Bytes
  root: mantle_Bytes
  transactionHash: mantle_Bytes
  blockNumber: BigInt
  rootCount: mantle_RootCount
}

input mantle_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mantle_Bytes
  transferId_not: mantle_Bytes
  transferId_gt: mantle_Bytes
  transferId_lt: mantle_Bytes
  transferId_gte: mantle_Bytes
  transferId_lte: mantle_Bytes
  transferId_in: [mantle_Bytes!]
  transferId_not_in: [mantle_Bytes!]
  transferId_contains: mantle_Bytes
  transferId_not_contains: mantle_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: mantle_Bytes
  leaf_not: mantle_Bytes
  leaf_gt: mantle_Bytes
  leaf_lt: mantle_Bytes
  leaf_gte: mantle_Bytes
  leaf_lte: mantle_Bytes
  leaf_in: [mantle_Bytes!]
  leaf_not_in: [mantle_Bytes!]
  leaf_contains: mantle_Bytes
  leaf_not_contains: mantle_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: mantle_Bytes
  message_not: mantle_Bytes
  message_gt: mantle_Bytes
  message_lt: mantle_Bytes
  message_gte: mantle_Bytes
  message_lte: mantle_Bytes
  message_in: [mantle_Bytes!]
  message_not_in: [mantle_Bytes!]
  message_contains: mantle_Bytes
  message_not_contains: mantle_Bytes
  root: mantle_Bytes
  root_not: mantle_Bytes
  root_gt: mantle_Bytes
  root_lt: mantle_Bytes
  root_gte: mantle_Bytes
  root_lte: mantle_Bytes
  root_in: [mantle_Bytes!]
  root_not_in: [mantle_Bytes!]
  root_contains: mantle_Bytes
  root_not_contains: mantle_Bytes
  transactionHash: mantle_Bytes
  transactionHash_not: mantle_Bytes
  transactionHash_gt: mantle_Bytes
  transactionHash_lt: mantle_Bytes
  transactionHash_gte: mantle_Bytes
  transactionHash_lte: mantle_Bytes
  transactionHash_in: [mantle_Bytes!]
  transactionHash_not_in: [mantle_Bytes!]
  transactionHash_contains: mantle_Bytes
  transactionHash_not_contains: mantle_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: mantle_RootCount_filter
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_OriginMessage_filter]
  or: [mantle_OriginMessage_filter]
}

enum mantle_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
  rootCount__id
  rootCount__count
}

type mantle_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: mantle_Bytes
  nonce: BigInt
  status: mantle_TransferStatus
  messageHash: mantle_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mantle_Bytes
  delegate: mantle_Bytes
  receiveLocal: Boolean
  callData: mantle_Bytes
  slippage: BigInt
  originSender: mantle_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mantle_Bytes
  asset: mantle_Asset
  transactingAsset: mantle_Bytes
  message: mantle_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: mantle_RelayerFee_orderBy, orderDirection: mantle_OrderDirection, where: mantle_RelayerFee_filter): [mantle_RelayerFee!]
  initialRelayerFeeAsset: mantle_Bytes
  caller: mantle_Bytes
  transactionHash: mantle_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: mantle_Bytes
  txNonce: BigInt
}

input mantle_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mantle_Bytes
  transferId_not: mantle_Bytes
  transferId_gt: mantle_Bytes
  transferId_lt: mantle_Bytes
  transferId_gte: mantle_Bytes
  transferId_lte: mantle_Bytes
  transferId_in: [mantle_Bytes!]
  transferId_not_in: [mantle_Bytes!]
  transferId_contains: mantle_Bytes
  transferId_not_contains: mantle_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mantle_TransferStatus
  status_not: mantle_TransferStatus
  status_in: [mantle_TransferStatus!]
  status_not_in: [mantle_TransferStatus!]
  messageHash: mantle_Bytes
  messageHash_not: mantle_Bytes
  messageHash_gt: mantle_Bytes
  messageHash_lt: mantle_Bytes
  messageHash_gte: mantle_Bytes
  messageHash_lte: mantle_Bytes
  messageHash_in: [mantle_Bytes!]
  messageHash_not_in: [mantle_Bytes!]
  messageHash_contains: mantle_Bytes
  messageHash_not_contains: mantle_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mantle_Bytes
  to_not: mantle_Bytes
  to_gt: mantle_Bytes
  to_lt: mantle_Bytes
  to_gte: mantle_Bytes
  to_lte: mantle_Bytes
  to_in: [mantle_Bytes!]
  to_not_in: [mantle_Bytes!]
  to_contains: mantle_Bytes
  to_not_contains: mantle_Bytes
  delegate: mantle_Bytes
  delegate_not: mantle_Bytes
  delegate_gt: mantle_Bytes
  delegate_lt: mantle_Bytes
  delegate_gte: mantle_Bytes
  delegate_lte: mantle_Bytes
  delegate_in: [mantle_Bytes!]
  delegate_not_in: [mantle_Bytes!]
  delegate_contains: mantle_Bytes
  delegate_not_contains: mantle_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mantle_Bytes
  callData_not: mantle_Bytes
  callData_gt: mantle_Bytes
  callData_lt: mantle_Bytes
  callData_gte: mantle_Bytes
  callData_lte: mantle_Bytes
  callData_in: [mantle_Bytes!]
  callData_not_in: [mantle_Bytes!]
  callData_contains: mantle_Bytes
  callData_not_contains: mantle_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: mantle_Bytes
  originSender_not: mantle_Bytes
  originSender_gt: mantle_Bytes
  originSender_lt: mantle_Bytes
  originSender_gte: mantle_Bytes
  originSender_lte: mantle_Bytes
  originSender_in: [mantle_Bytes!]
  originSender_not_in: [mantle_Bytes!]
  originSender_contains: mantle_Bytes
  originSender_not_contains: mantle_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mantle_Bytes
  canonicalId_not: mantle_Bytes
  canonicalId_gt: mantle_Bytes
  canonicalId_lt: mantle_Bytes
  canonicalId_gte: mantle_Bytes
  canonicalId_lte: mantle_Bytes
  canonicalId_in: [mantle_Bytes!]
  canonicalId_not_in: [mantle_Bytes!]
  canonicalId_contains: mantle_Bytes
  canonicalId_not_contains: mantle_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mantle_Asset_filter
  transactingAsset: mantle_Bytes
  transactingAsset_not: mantle_Bytes
  transactingAsset_gt: mantle_Bytes
  transactingAsset_lt: mantle_Bytes
  transactingAsset_gte: mantle_Bytes
  transactingAsset_lte: mantle_Bytes
  transactingAsset_in: [mantle_Bytes!]
  transactingAsset_not_in: [mantle_Bytes!]
  transactingAsset_contains: mantle_Bytes
  transactingAsset_not_contains: mantle_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: mantle_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: mantle_RelayerFee_filter
  initialRelayerFeeAsset: mantle_Bytes
  initialRelayerFeeAsset_not: mantle_Bytes
  initialRelayerFeeAsset_gt: mantle_Bytes
  initialRelayerFeeAsset_lt: mantle_Bytes
  initialRelayerFeeAsset_gte: mantle_Bytes
  initialRelayerFeeAsset_lte: mantle_Bytes
  initialRelayerFeeAsset_in: [mantle_Bytes!]
  initialRelayerFeeAsset_not_in: [mantle_Bytes!]
  initialRelayerFeeAsset_contains: mantle_Bytes
  initialRelayerFeeAsset_not_contains: mantle_Bytes
  caller: mantle_Bytes
  caller_not: mantle_Bytes
  caller_gt: mantle_Bytes
  caller_lt: mantle_Bytes
  caller_gte: mantle_Bytes
  caller_lte: mantle_Bytes
  caller_in: [mantle_Bytes!]
  caller_not_in: [mantle_Bytes!]
  caller_contains: mantle_Bytes
  caller_not_contains: mantle_Bytes
  transactionHash: mantle_Bytes
  transactionHash_not: mantle_Bytes
  transactionHash_gt: mantle_Bytes
  transactionHash_lt: mantle_Bytes
  transactionHash_gte: mantle_Bytes
  transactionHash_lte: mantle_Bytes
  transactionHash_in: [mantle_Bytes!]
  transactionHash_not_in: [mantle_Bytes!]
  transactionHash_contains: mantle_Bytes
  transactionHash_not_contains: mantle_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: mantle_Bytes
  txOrigin_not: mantle_Bytes
  txOrigin_gt: mantle_Bytes
  txOrigin_lt: mantle_Bytes
  txOrigin_gte: mantle_Bytes
  txOrigin_lte: mantle_Bytes
  txOrigin_in: [mantle_Bytes!]
  txOrigin_not_in: [mantle_Bytes!]
  txOrigin_contains: mantle_Bytes
  txOrigin_not_contains: mantle_Bytes
  txNonce: BigInt
  txNonce_not: BigInt
  txNonce_gt: BigInt
  txNonce_lt: BigInt
  txNonce_gte: BigInt
  txNonce_lte: BigInt
  txNonce_in: [BigInt!]
  txNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_OriginTransfer_filter]
  or: [mantle_OriginTransfer_filter]
}

enum mantle_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  transactingAsset
  message
  message__id
  message__transferId
  message__destinationDomain
  message__leaf
  message__index
  message__message
  message__root
  message__transactionHash
  message__blockNumber
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
  txNonce
}

type Query {
  mantle_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Asset
  mantle_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Asset_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Asset!]!
  mantle_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AssetStatus
  mantle_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AssetStatus_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AssetStatus!]!
  mantle_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AssetBalance
  mantle_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AssetBalance_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AssetBalance!]!
  mantle_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Router
  mantle_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Router_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Router!]!
  mantle_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RouterDailyTVL
  mantle_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RouterDailyTVL_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RouterDailyTVL!]!
  mantle_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RouterLiquidityEvent
  mantle_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RouterLiquidityEvent_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RouterLiquidityEvent!]!
  mantle_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Setting
  mantle_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Setting_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Setting!]!
  mantle_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Relayer
  mantle_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Relayer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Relayer!]!
  mantle_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Sequencer
  mantle_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Sequencer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Sequencer!]!
  mantle_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RelayerFee
  mantle_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RelayerFee_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RelayerFee!]!
  mantle_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_OriginTransfer
  mantle_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_OriginTransfer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_OriginTransfer!]!
  mantle_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_DestinationTransfer
  mantle_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_DestinationTransfer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_DestinationTransfer!]!
  mantle_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_OriginMessage
  mantle_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_OriginMessage_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_OriginMessage!]!
  mantle_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AggregateRoot
  mantle_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AggregateRoot_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AggregateRoot!]!
  mantle_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_ConnectorMeta
  mantle_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_ConnectorMeta_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_ConnectorMeta!]!
  mantle_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RootCount
  mantle_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RootCount_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RootCount!]!
  mantle_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RootMessageSent
  mantle_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RootMessageSent_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RootMessageSent!]!
  mantle_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RelayerFeesIncrease
  mantle_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RelayerFeesIncrease_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RelayerFeesIncrease!]!
  mantle_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_SlippageUpdate
  mantle_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_SlippageUpdate_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_SlippageUpdate!]!
  mantle_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_SnapshotRoot
  mantle_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_SnapshotRoot_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_SnapshotRoot!]!
  mantle_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_SpokeConnectorMode
  mantle_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_SpokeConnectorMode_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_SpokeConnectorMode!]!
  mantle_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AggregateRootProposed
  mantle_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AggregateRootProposed_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AggregateRootProposed!]!
  mantle_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_OptimisticRootFinalized
  mantle_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_OptimisticRootFinalized_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  mantle__meta(block: mantle_Block_height): mantle__Meta_
}

type mantle_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: mantle_Bytes
}

type mantle_RelayerFee {
  id: ID!
  transfer: mantle_OriginTransfer!
  fee: BigInt!
  asset: mantle_Bytes!
}

input mantle_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: mantle_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: mantle_Bytes
  asset_not: mantle_Bytes
  asset_gt: mantle_Bytes
  asset_lt: mantle_Bytes
  asset_gte: mantle_Bytes
  asset_lte: mantle_Bytes
  asset_in: [mantle_Bytes!]
  asset_not_in: [mantle_Bytes!]
  asset_contains: mantle_Bytes
  asset_not_contains: mantle_Bytes
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_RelayerFee_filter]
  or: [mantle_RelayerFee_filter]
}

enum mantle_RelayerFee_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__messageHash
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__transactingAsset
  transfer__bumpRelayerFeeCount
  transfer__initialRelayerFeeAsset
  transfer__caller
  transfer__transactionHash
  transfer__timestamp
  transfer__gasPrice
  transfer__gasLimit
  transfer__blockNumber
  transfer__txOrigin
  transfer__txNonce
  fee
  asset
}

type mantle_RelayerFeesIncrease {
  id: ID!
  transfer: mantle_OriginTransfer!
  increase: BigInt
  asset: mantle_Bytes
  caller: mantle_Bytes!
  transactionHash: mantle_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input mantle_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: mantle_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: mantle_Bytes
  asset_not: mantle_Bytes
  asset_gt: mantle_Bytes
  asset_lt: mantle_Bytes
  asset_gte: mantle_Bytes
  asset_lte: mantle_Bytes
  asset_in: [mantle_Bytes!]
  asset_not_in: [mantle_Bytes!]
  asset_contains: mantle_Bytes
  asset_not_contains: mantle_Bytes
  caller: mantle_Bytes
  caller_not: mantle_Bytes
  caller_gt: mantle_Bytes
  caller_lt: mantle_Bytes
  caller_gte: mantle_Bytes
  caller_lte: mantle_Bytes
  caller_in: [mantle_Bytes!]
  caller_not_in: [mantle_Bytes!]
  caller_contains: mantle_Bytes
  caller_not_contains: mantle_Bytes
  transactionHash: mantle_Bytes
  transactionHash_not: mantle_Bytes
  transactionHash_gt: mantle_Bytes
  transactionHash_lt: mantle_Bytes
  transactionHash_gte: mantle_Bytes
  transactionHash_lte: mantle_Bytes
  transactionHash_in: [mantle_Bytes!]
  transactionHash_not_in: [mantle_Bytes!]
  transactionHash_contains: mantle_Bytes
  transactionHash_not_contains: mantle_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_RelayerFeesIncrease_filter]
  or: [mantle_RelayerFeesIncrease_filter]
}

enum mantle_RelayerFeesIncrease_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__messageHash
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__transactingAsset
  transfer__bumpRelayerFeeCount
  transfer__initialRelayerFeeAsset
  transfer__caller
  transfer__transactionHash
  transfer__timestamp
  transfer__gasPrice
  transfer__gasLimit
  transfer__blockNumber
  transfer__txOrigin
  transfer__txNonce
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input mantle_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: mantle_Bytes
  relayer_not: mantle_Bytes
  relayer_gt: mantle_Bytes
  relayer_lt: mantle_Bytes
  relayer_gte: mantle_Bytes
  relayer_lte: mantle_Bytes
  relayer_in: [mantle_Bytes!]
  relayer_not_in: [mantle_Bytes!]
  relayer_contains: mantle_Bytes
  relayer_not_contains: mantle_Bytes
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_Relayer_filter]
  or: [mantle_Relayer_filter]
}

enum mantle_Relayer_orderBy {
  id
  isActive
  relayer
}

type mantle_RootCount {
  id: ID!
  count: BigInt
}

input mantle_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_RootCount_filter]
  or: [mantle_RootCount_filter]
}

enum mantle_RootCount_orderBy {
  id
  count
}

type mantle_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: mantle_Bytes
  count: BigInt
  caller: mantle_Bytes
  transactionHash: mantle_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mantle_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: mantle_Bytes
  root_not: mantle_Bytes
  root_gt: mantle_Bytes
  root_lt: mantle_Bytes
  root_gte: mantle_Bytes
  root_lte: mantle_Bytes
  root_in: [mantle_Bytes!]
  root_not_in: [mantle_Bytes!]
  root_contains: mantle_Bytes
  root_not_contains: mantle_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: mantle_Bytes
  caller_not: mantle_Bytes
  caller_gt: mantle_Bytes
  caller_lt: mantle_Bytes
  caller_gte: mantle_Bytes
  caller_lte: mantle_Bytes
  caller_in: [mantle_Bytes!]
  caller_not_in: [mantle_Bytes!]
  caller_contains: mantle_Bytes
  caller_not_contains: mantle_Bytes
  transactionHash: mantle_Bytes
  transactionHash_not: mantle_Bytes
  transactionHash_gt: mantle_Bytes
  transactionHash_lt: mantle_Bytes
  transactionHash_gte: mantle_Bytes
  transactionHash_lte: mantle_Bytes
  transactionHash_in: [mantle_Bytes!]
  transactionHash_not_in: [mantle_Bytes!]
  transactionHash_contains: mantle_Bytes
  transactionHash_not_contains: mantle_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_RootMessageSent_filter]
  or: [mantle_RootMessageSent_filter]
}

enum mantle_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mantle_Router {
  id: ID!
  isActive: Boolean!
  owner: mantle_Bytes
  recipient: mantle_Bytes
  proposedOwner: mantle_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: mantle_AssetBalance_orderBy, orderDirection: mantle_OrderDirection, where: mantle_AssetBalance_filter): [mantle_AssetBalance!]!
}

type mantle_RouterDailyTVL {
  id: ID!
  router: mantle_Router!
  asset: mantle_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input mantle_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mantle_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mantle_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_RouterDailyTVL_filter]
  or: [mantle_RouterDailyTVL_filter]
}

enum mantle_RouterDailyTVL_orderBy {
  id
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  timestamp
  balance
}

type mantle_RouterLiquidityEvent {
  id: ID!
  type: mantle_RouterLiquidityEventType
  router: mantle_Router!
  asset: mantle_Asset!
  amount: BigInt!
  balance: BigInt!
  caller: mantle_Bytes
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: mantle_Bytes!
  nonce: BigInt!
}

enum mantle_RouterLiquidityEventType {
  Add
  Remove
}

input mantle_RouterLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: mantle_RouterLiquidityEventType
  type_not: mantle_RouterLiquidityEventType
  type_in: [mantle_RouterLiquidityEventType!]
  type_not_in: [mantle_RouterLiquidityEventType!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mantle_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mantle_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  caller: mantle_Bytes
  caller_not: mantle_Bytes
  caller_gt: mantle_Bytes
  caller_lt: mantle_Bytes
  caller_gte: mantle_Bytes
  caller_lte: mantle_Bytes
  caller_in: [mantle_Bytes!]
  caller_not_in: [mantle_Bytes!]
  caller_contains: mantle_Bytes
  caller_not_contains: mantle_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transactionHash: mantle_Bytes
  transactionHash_not: mantle_Bytes
  transactionHash_gt: mantle_Bytes
  transactionHash_lt: mantle_Bytes
  transactionHash_gte: mantle_Bytes
  transactionHash_lte: mantle_Bytes
  transactionHash_in: [mantle_Bytes!]
  transactionHash_not_in: [mantle_Bytes!]
  transactionHash_contains: mantle_Bytes
  transactionHash_not_contains: mantle_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_RouterLiquidityEvent_filter]
  or: [mantle_RouterLiquidityEvent_filter]
}

enum mantle_RouterLiquidityEvent_orderBy {
  id
  type
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  amount
  balance
  caller
  blockNumber
  timestamp
  transactionHash
  nonce
}

input mantle_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: mantle_Bytes
  owner_not: mantle_Bytes
  owner_gt: mantle_Bytes
  owner_lt: mantle_Bytes
  owner_gte: mantle_Bytes
  owner_lte: mantle_Bytes
  owner_in: [mantle_Bytes!]
  owner_not_in: [mantle_Bytes!]
  owner_contains: mantle_Bytes
  owner_not_contains: mantle_Bytes
  recipient: mantle_Bytes
  recipient_not: mantle_Bytes
  recipient_gt: mantle_Bytes
  recipient_lt: mantle_Bytes
  recipient_gte: mantle_Bytes
  recipient_lte: mantle_Bytes
  recipient_in: [mantle_Bytes!]
  recipient_not_in: [mantle_Bytes!]
  recipient_contains: mantle_Bytes
  recipient_not_contains: mantle_Bytes
  proposedOwner: mantle_Bytes
  proposedOwner_not: mantle_Bytes
  proposedOwner_gt: mantle_Bytes
  proposedOwner_lt: mantle_Bytes
  proposedOwner_gte: mantle_Bytes
  proposedOwner_lte: mantle_Bytes
  proposedOwner_in: [mantle_Bytes!]
  proposedOwner_not_in: [mantle_Bytes!]
  proposedOwner_contains: mantle_Bytes
  proposedOwner_not_contains: mantle_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: mantle_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_Router_filter]
  or: [mantle_Router_filter]
}

enum mantle_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type mantle_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: mantle_Bytes
}

input mantle_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: mantle_Bytes
  sequencer_not: mantle_Bytes
  sequencer_gt: mantle_Bytes
  sequencer_lt: mantle_Bytes
  sequencer_gte: mantle_Bytes
  sequencer_lte: mantle_Bytes
  sequencer_in: [mantle_Bytes!]
  sequencer_not_in: [mantle_Bytes!]
  sequencer_contains: mantle_Bytes
  sequencer_not_contains: mantle_Bytes
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_Sequencer_filter]
  or: [mantle_Sequencer_filter]
}

enum mantle_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type mantle_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: mantle_Bytes!
}

input mantle_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: mantle_Bytes
  caller_not: mantle_Bytes
  caller_gt: mantle_Bytes
  caller_lt: mantle_Bytes
  caller_gte: mantle_Bytes
  caller_lte: mantle_Bytes
  caller_in: [mantle_Bytes!]
  caller_not_in: [mantle_Bytes!]
  caller_contains: mantle_Bytes
  caller_not_contains: mantle_Bytes
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_Setting_filter]
  or: [mantle_Setting_filter]
}

enum mantle_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type mantle_SlippageUpdate {
  id: ID!
  transfer: mantle_DestinationTransfer!
  slippage: BigInt!
  caller: mantle_Bytes!
  transactionHash: mantle_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input mantle_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: mantle_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: mantle_Bytes
  caller_not: mantle_Bytes
  caller_gt: mantle_Bytes
  caller_lt: mantle_Bytes
  caller_gte: mantle_Bytes
  caller_lte: mantle_Bytes
  caller_in: [mantle_Bytes!]
  caller_not_in: [mantle_Bytes!]
  caller_contains: mantle_Bytes
  caller_not_contains: mantle_Bytes
  transactionHash: mantle_Bytes
  transactionHash_not: mantle_Bytes
  transactionHash_gt: mantle_Bytes
  transactionHash_lt: mantle_Bytes
  transactionHash_gte: mantle_Bytes
  transactionHash_lte: mantle_Bytes
  transactionHash_in: [mantle_Bytes!]
  transactionHash_not_in: [mantle_Bytes!]
  transactionHash_contains: mantle_Bytes
  transactionHash_not_contains: mantle_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_SlippageUpdate_filter]
  or: [mantle_SlippageUpdate_filter]
}

enum mantle_SlippageUpdate_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__bumpSlippageCount
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__amount
  transfer__routersFee
  transfer__executedCaller
  transfer__executedTransactionHash
  transfer__executedTimestamp
  transfer__executedGasPrice
  transfer__executedGasLimit
  transfer__executedBlockNumber
  transfer__executedTxOrigin
  transfer__executedTxNonce
  transfer__reconciledCaller
  transfer__reconciledTransactionHash
  transfer__reconciledTimestamp
  transfer__reconciledGasPrice
  transfer__reconciledGasLimit
  transfer__reconciledBlockNumber
  transfer__reconciledTxOrigin
  transfer__reconciledTxNonce
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mantle_SnapshotRoot {
  id: ID!
  spokeDomain: BigInt
  root: mantle_Bytes!
  count: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

input mantle_SnapshotRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  root: mantle_Bytes
  root_not: mantle_Bytes
  root_gt: mantle_Bytes
  root_lt: mantle_Bytes
  root_gte: mantle_Bytes
  root_lte: mantle_Bytes
  root_in: [mantle_Bytes!]
  root_not_in: [mantle_Bytes!]
  root_contains: mantle_Bytes
  root_not_contains: mantle_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_SnapshotRoot_filter]
  or: [mantle_SnapshotRoot_filter]
}

enum mantle_SnapshotRoot_orderBy {
  id
  spokeDomain
  root
  count
  timestamp
  blockNumber
}

type mantle_SpokeConnectorMode {
  id: ID!
  mode: String!
}

input mantle_SpokeConnectorMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: mantle_BlockChangedFilter
  and: [mantle_SpokeConnectorMode_filter]
  or: [mantle_SpokeConnectorMode_filter]
}

enum mantle_SpokeConnectorMode_orderBy {
  id
  mode
}

type Subscription {
  mantle_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Asset
  mantle_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Asset_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Asset!]!
  mantle_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AssetStatus
  mantle_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AssetStatus_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AssetStatus!]!
  mantle_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AssetBalance
  mantle_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AssetBalance_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AssetBalance!]!
  mantle_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Router
  mantle_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Router_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Router!]!
  mantle_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RouterDailyTVL
  mantle_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RouterDailyTVL_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RouterDailyTVL!]!
  mantle_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RouterLiquidityEvent
  mantle_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RouterLiquidityEvent_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RouterLiquidityEvent!]!
  mantle_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Setting
  mantle_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Setting_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Setting!]!
  mantle_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Relayer
  mantle_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Relayer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Relayer!]!
  mantle_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_Sequencer
  mantle_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_Sequencer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_Sequencer!]!
  mantle_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RelayerFee
  mantle_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RelayerFee_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RelayerFee!]!
  mantle_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_OriginTransfer
  mantle_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_OriginTransfer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_OriginTransfer!]!
  mantle_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_DestinationTransfer
  mantle_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_DestinationTransfer_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_DestinationTransfer!]!
  mantle_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_OriginMessage
  mantle_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_OriginMessage_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_OriginMessage!]!
  mantle_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AggregateRoot
  mantle_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AggregateRoot_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AggregateRoot!]!
  mantle_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_ConnectorMeta
  mantle_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_ConnectorMeta_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_ConnectorMeta!]!
  mantle_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RootCount
  mantle_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RootCount_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RootCount!]!
  mantle_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RootMessageSent
  mantle_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RootMessageSent_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RootMessageSent!]!
  mantle_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_RelayerFeesIncrease
  mantle_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_RelayerFeesIncrease_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_RelayerFeesIncrease!]!
  mantle_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_SlippageUpdate
  mantle_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_SlippageUpdate_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_SlippageUpdate!]!
  mantle_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_SnapshotRoot
  mantle_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_SnapshotRoot_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_SnapshotRoot!]!
  mantle_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_SpokeConnectorMode
  mantle_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_SpokeConnectorMode_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_SpokeConnectorMode!]!
  mantle_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_AggregateRootProposed
  mantle_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_AggregateRootProposed_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_AggregateRootProposed!]!
  mantle_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mantle_OptimisticRootFinalized
  mantle_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mantle_OptimisticRootFinalized_orderBy
    orderDirection: mantle_OrderDirection
    where: mantle_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mantle_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mantle_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  mantle__meta(block: mantle_Block_height): mantle__Meta_
}

enum mantle_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type mantle__Block_ {
  """The hash of the block"""
  hash: mantle_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type mantle__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: mantle__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}